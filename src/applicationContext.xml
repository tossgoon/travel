<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="    
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd  
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd  
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
	<!-- 数据库配置 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver">
		</property>
		<property name="url" value="jdbc:mysql://localhost:3306/travel">
		</property>
		<property name="username" value="root"></property>
		<property name="password" value="gis"></property>
		 <property name="validationQuery" value="SELECT 1" />
         <property name="testOnBorrow" value="true"/> 
	</bean>
	<!-- session工厂 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.MySQLDialect
				</prop>
<!-- 				下面这句话的意思是，根据java程序中配置的实体model，自动更新数据库的表结构 -->				
              <prop key="hibernate.hbm2ddl.auto">update</prop>
<!--               <prop key="hibernate.autoReconnect">true</prop>
 -->			</props>
		</property>
		<!-- 实体与数据库映射文件，在classpath:/com/jktech/pojo文件夹下 -->
		
	<!-- 	<property name="mappingResources">
			<list>
				<value>com/travel/pojo/User.hbm.xml</value>
			</list>
		</property> -->
		
		 <property name="mappingDirectoryLocations">
			<list>
				<value>classpath:/com/travel/pojo</value>
			</list>
		</property> 
	</bean>

 
 
	<!-- *****************事务配置信息 begin **************** -->
	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- 配置事务通知属性 -->
	<tx:advice id="gisAdvice" transaction-manager="transactionManager">
		<!-- 定义事务传播属性 -->
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="new*" propagation="REQUIRED" />
			<tx:method name="set*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="change*" propagation="REQUIRED" />
			<tx:method name="upload*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="load*" propagation="REQUIRED" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- 面向切面方式，定义哪些类的哪些方法参与事务 -->
	<aop:config>
		<aop:pointcut id="gisServices"
			expression="execution(*	com.travel.service.*.*(..))" />
		<aop:advisor advice-ref="gisAdvice" pointcut-ref="gisServices" />
	</aop:config>
	<!-- *****************事务配置信息 over**************** -->
	<bean id="dao" class="com.travel.dao.BaseDao"  scope="prototype">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<bean id="userService" class="com.travel.service.UserService"  scope="prototype">
		<property name="dao" ref="dao"></property>
	</bean>
	<bean id="userAct" class="com.travel.action.UserAction" scope="prototype">
		<property name="userService" ref="userService"></property>
	</bean>
	<bean id="portalService" class="com.travel.service.PortalService"  scope="prototype">
		<property name="dao" ref="dao"></property>
	</bean>
	<bean id="portalAct" class="com.travel.action.PortalAction" scope="prototype">
		<property name="portalService" ref="portalService"></property>
	</bean>
	<bean id="fileIOService" class="com.travel.service.FileIOService">
	</bean>
	<bean id="fileUpLoad" class="com.travel.action.UpLoadAction" scope="prototype">
		<property name="fileIOService" ref="fileIOService"></property>
	</bean>
	<bean id="fileDownLoad" class="com.travel.action.DownLoadAction"
		scope="prototype">
		<property name="fileIOService" ref="fileIOService"></property>
		<property name="oaFileService" ref="oaFileService"></property>
	</bean>
	<bean id="oaService" class="com.travel.service.OaService"  scope="prototype">
		<property name="dao" ref="dao"></property>
	</bean> 
	<bean id="oaAct" class="com.travel.action.OaAction" scope="prototype">
		<property name="oaService" ref="oaService"></property>
		<property name="oaFileService" ref="oaFileService"></property>
		<property name="oaReceiverService" ref="oaReceiverService"></property>
		<property name="userService" ref="userService"></property>
	</bean>
	<bean id="oaFileService" class="com.travel.service.OaFileService"  scope="prototype">
		<property name="dao" ref="dao"></property>
	</bean>
	<bean id="oaReceiverService" class="com.travel.service.OaReceiverService"  scope="prototype">
		<property name="dao" ref="dao"></property>
	</bean>
	<bean id="deptService" class="com.travel.service.DeptService"  scope="prototype">
		<property name="dao" ref="dao"></property>
	</bean> 
	<bean id="deptAct" class="com.travel.action.DeptAction" scope="prototype">
		<property name="deptService" ref="deptService"></property>
		<property name="userService" ref="userService"></property>
	</bean>
	
	<bean id="surveyService" class="com.travel.service.GeneralService"  scope="prototype">
		<property name="dao" ref="dao"></property>
	</bean> 
	<bean id="animalAct" class="com.travel.action.AnimalsurveyAction" scope="prototype">
		<property name="animalService" ref="surveyService"></property>
	</bean>
	<bean id="cameraAct" class="com.travel.action.CamerasurveyAction" scope="prototype">
		<property name="cameraService" ref="surveyService"></property>
	</bean>
	<bean id="chickAct" class="com.travel.action.ChicksurveyAction" scope="prototype">
		<property name="chicksurService" ref="surveyService"></property>
	</bean>
	<bean id="importinfoAct" class="com.travel.action.ImportinfoAction" scope="prototype">
		<property name="importinfoService" ref="surveyService"></property>
	</bean>
	<bean id="plantAct" class="com.travel.action.PlantsurveyAction" scope="prototype">
		<property name="plantService" ref="surveyService"></property>
	</bean>
	<bean id="protectAct" class="com.travel.action.ProtectrecordAction" scope="prototype">
		<property name="protectService" ref="surveyService"></property>
	</bean>
	<bean id="weatherAct" class="com.travel.action.WeatherAction" scope="prototype">
	</bean>
</beans>